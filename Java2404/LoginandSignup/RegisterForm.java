package Java2404.LoginandSignup;

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;

public class RegisterForm extends JFrame {
    private LoginForm loginForm;
    private JTextField nameField;
    private JTextField emailField;
    private JPasswordField passwordField;
    private JPasswordField confirmPasswordField;
    private JButton togglePasswordButton;
    private JCheckBox agreeCheckBox;

    public RegisterForm(LoginForm loginForm) {
        this.loginForm = loginForm;
        setTitle("ƒêƒÉng k√Ω");
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setSize(1000, 600);
        setMinimumSize(new Dimension(1000, 600));
        setLocationRelativeTo(null);

        // T·∫°o panel ch√≠nh v·ªõi background
        JPanel mainPanel = new JPanel(new BorderLayout()) {
            @Override
            protected void paintComponent(Graphics g) {
                super.paintComponent(g);
                try {
                    Image backgroundImage = new ImageIcon("Java2404/image/background.png").getImage();
                    g.drawImage(backgroundImage, 0, 0, getWidth(), getHeight(), this);
                } catch (Exception e) {
                    g.setColor(Color.WHITE);
                    g.fillRect(0, 0, getWidth(), getHeight());
                    g.setColor(Color.RED);
                    g.drawString("H√¨nh ·∫£nh kh√¥ng t·∫£i ƒë∆∞·ª£c", 10, 20);
                }
            }
        };
        mainPanel.setLayout(new BorderLayout());

        // Panel chia ƒë√¥i
        JPanel contentPanel = new JPanel(new GridLayout(1, 2));
        contentPanel.setOpaque(false);

        // Panel b√™n tr√°i cho form ƒëƒÉng k√Ω
        JPanel formPanel = new JPanel();
        formPanel.setLayout(new GridBagLayout());
        formPanel.setOpaque(false);

        // Kh·ªüi t·∫°o v√† c·∫•u h√¨nh GridBagConstraints
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.insets = new Insets(10, 10, 10, 10); // Kho·∫£ng c√°ch gi·ªØa c√°c th√†nh ph·∫ßn
        gbc.fill = GridBagConstraints.HORIZONTAL; // ƒêi·ªÅn ngang

        // Ti√™u ƒë·ªÅ "ƒêƒÉng k√Ω"
        JLabel titleLabel = new JLabel("ƒêƒÉng k√Ω", SwingConstants.CENTER);
        titleLabel.setFont(new Font("Arial", Font.BOLD, 24));
        titleLabel.setForeground(new Color(255, 51, 51));
        gbc.gridx = 0; // C·ªôt b·∫Øt ƒë·∫ßu
        gbc.gridy = 0; // H√†ng b·∫Øt ƒë·∫ßu
        gbc.gridwidth = 2; // Chi·∫øm 2 c·ªôt
        formPanel.add(titleLabel, gbc);

        // N√∫t m·∫°ng x√£ h·ªôi
        JPanel socialPanel = new JPanel();
        socialPanel.setOpaque(false);
        JButton googleButton = new JButton("G");
        JButton facebookButton = new JButton("f");
        JButton twitterButton = new JButton("T");
        JButton linkedinButton = new JButton("in");
        JButton[] socialButtons = {googleButton, facebookButton, twitterButton, linkedinButton};
        for (JButton btn : socialButtons) {
            btn.setFont(new Font("Arial", Font.BOLD, 14));
            btn.setBackground(Color.LIGHT_GRAY);
            btn.setForeground(Color.BLACK);
            btn.setPreferredSize(new Dimension(40, 40));
            btn.setBorder(BorderFactory.createEmptyBorder());
            btn.setFocusPainted(false);
            btn.setBorderPainted(false);
            btn.setContentAreaFilled(false);
            btn.setOpaque(true);
            btn.setUI(new javax.swing.plaf.basic.BasicButtonUI() {
                @Override
                public void paint(Graphics g, JComponent c) {
                    AbstractButton b = (AbstractButton) c;
                    g.setColor(b.getBackground());
                    g.fillOval(0, 0, b.getWidth(), b.getHeight());
                    super.paint(g, c);
                }
            });
            socialPanel.add(btn);
        }
        gbc.gridy = 1;
        formPanel.add(socialPanel, gbc);

        // VƒÉn b·∫£n "ho·∫∑c s·ª≠ d·ª•ng email ƒë·ªÉ ƒëƒÉng k√Ω:"
        JLabel orLabel = new JLabel("ho·∫∑c s·ª≠ d·ª•ng email ƒë·ªÉ ƒëƒÉng k√Ω:", SwingConstants.CENTER);
        orLabel.setForeground(Color.GRAY);
        gbc.gridy = 2;
        formPanel.add(orLabel, gbc);

        // Tr∆∞·ªùng T√™n v·ªõi placeholder
        nameField = new JTextField("H·ªç v√† t√™n");
        nameField.setForeground(Color.GRAY);
        nameField.setPreferredSize(new Dimension(300, 40));
        nameField.setBorder(BorderFactory.createLineBorder(Color.GRAY, 1, true));
        nameField.addFocusListener(new FocusListener() {
            @Override
            public void focusGained(FocusEvent e) {
                if (nameField.getText().equals("H·ªç v√† t√™n")) {
                    nameField.setText("");
                    nameField.setForeground(Color.BLACK);
                }
            }

            @Override
            public void focusLost(FocusEvent e) {
                if (nameField.getText().isEmpty()) {
                    nameField.setText("H·ªç v√† t√™n");
                    nameField.setForeground(Color.GRAY);
                }
            }
        });
        gbc.gridy = 3;
        formPanel.add(nameField, gbc);

        // Tr∆∞·ªùng Email v·ªõi placeholder
        emailField = new JTextField("Email");
        emailField.setForeground(Color.GRAY);
        emailField.setPreferredSize(new Dimension(300, 40));
        emailField.setBorder(BorderFactory.createLineBorder(Color.GRAY, 1, true));
        emailField.addFocusListener(new FocusListener() {
            @Override
            public void focusGained(FocusEvent e) {
                if (emailField.getText().equals("Email")) {
                    emailField.setText("");
                    emailField.setForeground(Color.BLACK);
                }
            }

            @Override
            public void focusLost(FocusEvent e) {
                if (emailField.getText().isEmpty()) {
                    emailField.setText("Email");
                    emailField.setForeground(Color.GRAY);
                }
            }
        });
        gbc.gridy = 4;
        formPanel.add(emailField, gbc);

        // Tr∆∞·ªùng M·∫≠t kh·∫©u v·ªõi placeholder v√† n√∫t con m·∫Øt
        JPanel passwordContainer = new JPanel(new BorderLayout(0, 0));
        passwordContainer.setOpaque(false);
        passwordContainer.setBorder(BorderFactory.createLineBorder(Color.GRAY, 1, true));
        passwordContainer.setPreferredSize(new Dimension(300, 40));

        passwordField = new JPasswordField("M·∫≠t kh·∫©u");
        passwordField.setEchoChar((char) 0);
        passwordField.setForeground(Color.GRAY);
        passwordField.setBorder(null);
        passwordField.addFocusListener(new FocusListener() {
            @Override
            public void focusGained(FocusEvent e) {
                if (new String(passwordField.getPassword()).equals("M·∫≠t kh·∫©u")) {
                    passwordField.setText("");
                    passwordField.setEchoChar('‚Ä¢');
                    passwordField.setForeground(Color.BLACK);
                }
            }

            @Override
            public void focusLost(FocusEvent e) {
                if (new String(passwordField.getPassword()).isEmpty()) {
                    passwordField.setText("M·∫≠t kh·∫©u");
                    passwordField.setEchoChar((char) 0);
                    passwordField.setForeground(Color.GRAY);
                }
            }
        });

        togglePasswordButton = new JButton("üëÅÔ∏è");
        togglePasswordButton.setPreferredSize(new Dimension(40, 40));
        togglePasswordButton.setFocusPainted(false);
        togglePasswordButton.setOpaque(true);
        togglePasswordButton.setBackground(Color.WHITE);
        togglePasswordButton.setBorderPainted(false);
        togglePasswordButton.setBorder(null);
        togglePasswordButton.setContentAreaFilled(true);
        togglePasswordButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (passwordField.getEchoChar() != 0) {
                    passwordField.setEchoChar((char) 0);
                } else {
                    passwordField.setEchoChar('‚Ä¢');
                }
            }
        });

        passwordContainer.add(passwordField, BorderLayout.CENTER);
        passwordContainer.add(togglePasswordButton, BorderLayout.EAST);
        gbc.gridy = 5;
        formPanel.add(passwordContainer, gbc);

        // Tr∆∞·ªùng X√°c nh·∫≠n m·∫≠t kh·∫©u v·ªõi placeholder
        confirmPasswordField = new JPasswordField("Nh·∫≠p l·∫°i m·∫≠t kh·∫©u");
        confirmPasswordField.setEchoChar((char) 0);
        confirmPasswordField.setForeground(Color.GRAY);
        confirmPasswordField.setPreferredSize(new Dimension(300, 40));
        confirmPasswordField.setBorder(BorderFactory.createLineBorder(Color.GRAY, 1, true));
        confirmPasswordField.addFocusListener(new FocusListener() {
            @Override
            public void focusGained(FocusEvent e) {
                if (new String(confirmPasswordField.getPassword()).equals("Nh·∫≠p l·∫°i m·∫≠t kh·∫©u")) {
                    confirmPasswordField.setText("");
                    confirmPasswordField.setEchoChar('‚Ä¢');
                    confirmPasswordField.setForeground(Color.BLACK);
                }
            }

            @Override
            public void focusLost(FocusEvent e) {
                if (new String(confirmPasswordField.getPassword()).isEmpty()) {
                    confirmPasswordField.setText("Nh·∫≠p l·∫°i m·∫≠t kh·∫©u");
                    confirmPasswordField.setEchoChar((char) 0);
                    confirmPasswordField.setForeground(Color.GRAY);
                }
            }
        });
        gbc.gridy = 6;
        formPanel.add(confirmPasswordField, gbc);

        // H·ªôp ki·ªÉm "T√¥i ƒë·ªìng √Ω v·ªõi ƒëi·ªÅu kho·∫£n v√† ch√≠nh s√°ch b·∫£o m·∫≠t"
        agreeCheckBox = new JCheckBox("T√¥i ƒë·ªìng √Ω v·ªõi ƒëi·ªÅu kho·∫£n v√† ch√≠nh s√°ch b·∫£o m·∫≠t");
        agreeCheckBox.setForeground(new Color(255, 51, 51));
        agreeCheckBox.setOpaque(false);
        agreeCheckBox.setBorder(BorderFactory.createEmptyBorder());
        gbc.gridy = 7;
        formPanel.add(agreeCheckBox, gbc);

        // N√∫t "ƒêƒÉng k√Ω" v√† "ƒêƒÉng nh·∫≠p"
        JPanel buttonPanel = new JPanel();
        buttonPanel.setOpaque(false);
        JButton signUpButton = new JButton("ƒêƒÉng k√Ω");
        signUpButton.setBackground(new Color(255, 51, 51));
        signUpButton.setForeground(Color.WHITE);
        signUpButton.setPreferredSize(new Dimension(150, 40));
        signUpButton.setFocusPainted(false);
        signUpButton.setBorder(BorderFactory.createLineBorder(new Color(255, 51, 51), 2, true));
        signUpButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String name = nameField.getText();
                String email = emailField.getText();
                String password = new String(passwordField.getPassword());
                String confirmPassword = new String(confirmPasswordField.getPassword());

                // Ki·ªÉm tra m·∫≠t kh·∫©u c√≥ kh·ªõp kh√¥ng
                if (!password.equals(confirmPassword)) {
                    JOptionPane.showMessageDialog(RegisterForm.this, "M·∫≠t kh·∫©u kh√¥ng kh·ªõp!");
                    return;
                }

                // Ki·ªÉm tra ƒëi·ªÅu kho·∫£n
                if (!agreeCheckBox.isSelected()) {
                    JOptionPane.showMessageDialog(RegisterForm.this, "Vui l√≤ng ƒë·ªìng √Ω v·ªõi ƒëi·ªÅu kho·∫£n!");
                    return;
                }

                // Ki·ªÉm tra ƒë·ªô d√†i d·ªØ li·ªáu
                if (name.length() > 255) {
                    JOptionPane.showMessageDialog(RegisterForm.this, "T√™n qu√° d√†i (t·ªëi ƒëa 255 k√Ω t·ª±)!");
                    return;
                }
                if (email.length() > 255) {
                    JOptionPane.showMessageDialog(RegisterForm.this, "Email qu√° d√†i (t·ªëi ƒëa 255 k√Ω t·ª±)!");
                    return;
                }
                if (password.length() > 255) {
                    JOptionPane.showMessageDialog(RegisterForm.this, "M·∫≠t kh·∫©u qu√° d√†i (t·ªëi ƒëa 255 k√Ω t·ª±)!");
                    return;
                }

                // Ki·ªÉm tra xem c√°c tr∆∞·ªùng c√≥ r·ªóng kh√¥ng
                if (name.isEmpty() || name.equals("H·ªç v√† t√™n")) {
                    JOptionPane.showMessageDialog(RegisterForm.this, "Vui l√≤ng nh·∫≠p h·ªç v√† t√™n!");
                    return;
                }
                if (email.isEmpty() || email.equals("Email")) {
                    JOptionPane.showMessageDialog(RegisterForm.this, "Vui l√≤ng nh·∫≠p email!");
                    return;
                }
                if (password.isEmpty() || password.equals("M·∫≠t kh·∫©u")) {
                    JOptionPane.showMessageDialog(RegisterForm.this, "Vui l√≤ng nh·∫≠p m·∫≠t kh·∫©u!");
                    return;
                }

                registerUser(name, email, password);
            }
        });

        JButton signInButton = new JButton("ƒêƒÉng nh·∫≠p");
        signInButton.setBackground(new Color(255, 51, 51));
        signInButton.setForeground(Color.WHITE);
        signInButton.setPreferredSize(new Dimension(150, 40));
        signInButton.setFocusPainted(false);
        signInButton.setBorder(BorderFactory.createLineBorder(new Color(255, 51, 51), 2, true));
        signInButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                loginForm.setVisible(true);
                RegisterForm.this.dispose();
            }
        });

        buttonPanel.add(signUpButton);
        buttonPanel.add(signInButton);
        gbc.gridy = 8;
        formPanel.add(buttonPanel, gbc);

        // Panel b√™n ph·∫£i cho h√¨nh ·∫£nh m√≥n ƒÉn
        JPanel imagePanel = new JPanel();
        imagePanel.setOpaque(false);
        JLabel imageLabel = new JLabel();
        try {
            ImageIcon imageIcon = new ImageIcon("Java2404/image/logo-removebg-preview.png");
            Image image = imageIcon.getImage().getScaledInstance(550, 550, Image.SCALE_SMOOTH);
            imageLabel.setIcon(new ImageIcon(image));
        } catch (Exception e) {
            imageLabel.setText("H√¨nh ·∫£nh kh√¥ng t·∫£i ƒë∆∞·ª£c");
            imageLabel.setForeground(Color.RED);
        }
        imagePanel.add(imageLabel);

        // Th√™m c√°c panel v√†o contentPanel
        contentPanel.add(formPanel);
        contentPanel.add(imagePanel);
        mainPanel.add(contentPanel, BorderLayout.CENTER);
        add(mainPanel);
    }

    private void registerUser(String name, String email, String password) {
        try (Connection conn = TestConnection.getConnection()) {
            String sql = "INSERT INTO users (username, password) VALUES (?, ?)";
            PreparedStatement stmt = conn.prepareStatement(sql);
            stmt.setString(1, name); // S·ª≠ d·ª•ng name l√†m username
            stmt.setString(2, password);
            int rowsAffected = stmt.executeUpdate();
            if (rowsAffected > 0) {
                JOptionPane.showMessageDialog(this, "ƒêƒÉng k√Ω th√†nh c√¥ng!");
                loginForm.setVisible(true);
                this.dispose();
            } else {
                JOptionPane.showMessageDialog(this, "ƒêƒÉng k√Ω th·∫•t b·∫°i! Kh√¥ng c√≥ d·ªØ li·ªáu n√†o ƒë∆∞·ª£c th√™m.");
            }
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "ƒêƒÉng k√Ω th·∫•t b·∫°i! Chi ti·∫øt l·ªói: " + e.getMessage());
        }
    }
}